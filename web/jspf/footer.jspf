<!-- jQuery 3 -->
<script src="bower_components/jquery/dist/jquery.min.js"></script>
<!-- jQuery UI 1.11.4 -->
<script src="bower_components/jquery-ui/jquery-ui.min.js"></script>
<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js"></script>
<!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
<script>
    $.widget.bridge('uibutton', $.ui.button);
</script>
<!-- Bootstrap 3.3.7 -->
<script src="bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<!-- Morris.js charts -->
<script src="bower_components/raphael/raphael.min.js"></script>
<script src="bower_components/morris.js/morris.min.js"></script>
<!-- Sparkline -->
<script src="bower_components/jquery-sparkline/dist/jquery.sparkline.min.js"></script>
<!-- jvectormap -->
<script src="plugins/jvectormap/jquery-jvectormap-1.2.2.min.js"></script>
<script src="plugins/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
<!-- jQuery Knob Chart -->
<script src="bower_components/jquery-knob/dist/jquery.knob.min.js"></script>
<!-- daterangepicker -->
<script src="bower_components/moment/min/moment.min.js"></script>
<script src="bower_components/bootstrap-daterangepicker/daterangepicker.js"></script>
<!-- datepicker -->
<script src="bower_components/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
<!-- Bootstrap WYSIHTML5 -->
<script src="plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.all.min.js"></script>
<!-- Slimscroll -->
<script src="bower_components/jquery-slimscroll/jquery.slimscroll.min.js"></script>
<!-- FastClick -->
<script src="bower_components/fastclick/lib/fastclick.js"></script>
<!-- AdminLTE App -->
<script src="dist/js/adminlte.min.js"></script>
<!-- AdminLTE dashboard demo (This is only for demo purposes) -->
<script src="dist/js/pages/dashboard.js"></script>
<!-- AdminLTE for demo purposes -->
<script src="dist/js/demo.js"></script>
<!-- DataTables -->
<script src="bower_components/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>

<script src="bower_components/datatables.net/js/dataTables.buttons.min.js"></script>
<script src="bower_components/datatables.net/js/dataTables.flash.min.js"></script>
<script src="bower_components/datatables.net/js/dataTables.htlm5.min.js"></script>
<script src="bower_components/datatables.net/js/dataTables.print.min.js"></script>

<!-- ChartJS -->
<script src="bower_components/chart.js/Chart.js"></script>
<script src="bower_components/chart.js/Chart.min.js"></script>

<!-- Select2 -->
<script src="bower_components/select2/dist/js/select2.full.min.js"></script>
<script src="bower_components/select2/dist/js/select2.full.js"></script>
<script src="bower_components/select2/dist/js/select2.js"></script>
<script src="bower_components/select2/dist/js/select2.min.js"></script>

<script>
    $(document).ready(function () {
        $('.select2').select2();
    });
</script>

<!-- page script -->
<script type="text/javascript">
    $(function () {

        $('#attendance1').DataTable();
        $('#attendance2').DataTable();
        $('#attendance3').DataTable();
        $('#attendance4').DataTable();
        $('#attendance5').DataTable();
        $('#attendance6').DataTable();
        $('#attendance7').DataTable();
        $('#attendance8').DataTable();
        $('#attendance9').DataTable();
        $('#attendance10').DataTable();

        $('#arbTable').DataTable();

        $('#requested').DataTable();
        $('#cleared').DataTable();
        $('#endorsed').DataTable();
        $('#approved').DataTable();
        $('#released').DataTable();
        $('#forRelease').DataTable();

        $('#releaseTable').DataTable();
        $('#repaymentTable').DataTable();
        $('#pastDueTable').DataTable();


        $('#apcp1').DataTable();
        $('#apcp2').DataTable();
        $('#apcp3').DataTable();
        $('#capdev1').DataTable();
        $('#capdev2').DataTable();
        $('#capdev3').DataTable();


        $('.table.table-bordered.table-striped.modTable').DataTable();
        $('#example1').DataTable();
        $('#example8').DataTable();
        $('#example7').DataTable();
        $('#example3').DataTable();
        $('#example4').DataTable();
        $('#example5').DataTable();
        $('#example6').DataTable();
        $('#example2').DataTable({
            'paging': true,
            'lengthChange': false,
            'searching': false,
            'ordering': true,
            'info': true,
            'autoWidth': false
        });
        $('#example4').DataTable({
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ]
        });

        $('.numberOnly').inputmask("numeric", {
            radixPoint: ".",
            groupSeparator: ",",
            digits: 2,
            autoGroup: true,
            rightAlign: false,
            oncleared: function () {
                self.Value('');
            }
        });

//        $('.money > div').click(function () {
//            $('.money > input:eq(' + $('.money > div').index(this) + ')').focus();
//        });
//
//        $('.numberOnly').on('keydown', function (e) {
//
//            if (this.selectionStart || this.selectionStart == 0) {
//                // selectionStart won't work in IE < 9
//
//                var key = e.which;
//                var prevDefault = true;
//
//                var thouSep = ",";  // your seperator for thousands
//                var deciSep = ".";  // your seperator for decimals
//                var deciNumber = 2; // how many numbers after the comma
//
//                var thouReg = new RegExp(thouSep, "g");
//                var deciReg = new RegExp(deciSep, "g");
//
//                function spaceCaretPos(val, cPos) {
//                    /// get the right caret position without the spaces
//
//                    if (cPos > 0 && val.substring((cPos - 1), cPos) == thouSep)
//                        cPos = cPos - 1;
//
//                    if (val.substring(0, cPos).indexOf(thouSep) >= 0) {
//                        cPos = cPos - val.substring(0, cPos).match(thouReg).length;
//                    }
//
//                    return cPos;
//                }
//
//                function spaceFormat(val, pos) {
//                    /// add spaces for thousands
//
//                    if (val.indexOf(deciSep) >= 0) {
//                        var comPos = val.indexOf(deciSep);
//                        var int = val.substring(0, comPos);
//                        var dec = val.substring(comPos);
//                    } else {
//                        var int = val;
//                        var dec = "";
//                    }
//                    var ret = [val, pos];
//
//                    if (int.length > 3) {
//
//                        var newInt = "";
//                        var spaceIndex = int.length;
//
//                        while (spaceIndex > 3) {
//                            spaceIndex = spaceIndex - 3;
//                            newInt = thouSep + int.substring(spaceIndex, spaceIndex + 3) + newInt;
//                            if (pos > spaceIndex)
//                                pos++;
//                        }
//                        ret = [int.substring(0, spaceIndex) + newInt + dec, pos];
//                    }
//                    return ret;
//                }
//
//                $(this).on('keyup', function (ev) {
//
//                    if (ev.which == 8) {
//                        // reformat the thousands after backspace keyup
//
//                        var value = this.value;
//                        var caretPos = this.selectionStart;
//
//                        caretPos = spaceCaretPos(value, caretPos);
//                        value = value.replace(thouReg, '');
//
//                        var newValues = spaceFormat(value, caretPos);
//                        this.value = newValues[0];
//                        this.selectionStart = newValues[1];
//                        this.selectionEnd = newValues[1];
//                    }
//                });
//
//                if ((e.ctrlKey && (key == 65 || key == 67 || key == 86 || key == 88 || key == 89 || key == 90)) ||
//                        (e.shiftKey && key == 9)) // You don't want to disable your shortcuts!
//                    prevDefault = false;
//
//                if ((key < 37 || key > 40) && key != 8 && key != 9 && prevDefault) {
//                    e.preventDefault();
//
//                    if (!e.altKey && !e.shiftKey && !e.ctrlKey) {
//
//                        var value = this.value;
//                        if ((key > 95 && key < 106) || (key > 47 && key < 58) ||
//                                (deciNumber > 0 && (key == 110 || key == 188 || key == 190))) {
//
//                            var keys = {// reformat the keyCode
//                                48: 0, 49: 1, 50: 2, 51: 3, 52: 4, 53: 5, 54: 6, 55: 7, 56: 8, 57: 9,
//                                96: 0, 97: 1, 98: 2, 99: 3, 100: 4, 101: 5, 102: 6, 103: 7, 104: 8, 105: 9,
//                                110: deciSep, 188: deciSep, 190: deciSep
//                            };
//
//                            var caretPos = this.selectionStart;
//                            var caretEnd = this.selectionEnd;
//
//                            if (caretPos != caretEnd) // remove selected text
//                                value = value.substring(0, caretPos) + value.substring(caretEnd);
//
//                            caretPos = spaceCaretPos(value, caretPos);
//
//                            value = value.replace(thouReg, '');
//
//                            var before = value.substring(0, caretPos);
//                            var after = value.substring(caretPos);
//                            var newPos = caretPos + 1;
//
//                            if (keys[key] == deciSep && value.indexOf(deciSep) >= 0) {
//                                if (before.indexOf(deciSep) >= 0)
//                                    newPos--;
//                                before = before.replace(deciReg, '');
//                                after = after.replace(deciReg, '');
//                            }
//                            var newValue = before + keys[key] + after;
//
//                            if (newValue.substring(0, 1) == deciSep) {
//                                newValue = "0" + newValue;
//                                newPos++;
//                            }
//
//                            while (newValue.length > 1 && newValue.substring(0, 1) == "0" && newValue.substring(1, 2) != deciSep) {
//                                newValue = newValue.substring(1);
//                                newPos--;
//                            }
//
//                            if (newValue.indexOf(deciSep) >= 0) {
//                                var newLength = newValue.indexOf(deciSep) + deciNumber + 1;
//                                if (newValue.length > newLength) {
//                                    newValue = newValue.substring(0, newLength);
//                                }
//                            }
//
//                            newValues = spaceFormat(newValue, newPos);
//
//                            this.value = newValues[0];
//                            this.selectionStart = newValues[1];
//                            this.selectionEnd = newValues[1];
//                        }
//                    }
//                }
//
//                $(this).on('blur', function (e) {
//
//                    if (deciNumber > 0) {
//                        var value = this.value;
//
//                        var noDec = "";
//                        for (var i = 0; i < deciNumber; i++)
//                            noDec += "0";
//
//                        if (value == "0" + deciSep + noDec) {
//                            this.value = ""; //<-- put your default value here
//                        } else if (value.length > 0) {
//                            if (value.indexOf(deciSep) >= 0) {
//                                var newLength = value.indexOf(deciSep) + deciNumber + 1;
//                                if (value.length < newLength) {
//                                    while (value.length < newLength)
//                                        value = value + "0";
//                                    this.value = value.substring(0, newLength);
//                                }
//                            } else
//                                this.value = value + deciSep + noDec;
//                        }
//                    }
//                });
//            }
//        });
//
//        $('.price > input:eq(0)').focus();


    });
</script>
